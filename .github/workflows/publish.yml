name: Publish to PyPI and GitHub Release

on:
  push:
    branches:
      - main

permissions:
  contents: write  # Required to push commits and tags

jobs:
  bump-version-and-publish:
    runs-on: ubuntu-latest

    steps:
      ### Step 1: Checkout Repository ###
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for tagging

      ### Step 1.1: Prevent Infinite Loop ###
      - name: Check Committer
        if: github.actor == 'github-actions[bot]'
        run: |
          echo "Commit made by GitHub Actions. Exiting workflow."
          exit 0

      ### Step 2: Bump Version and Push Tag ###
      - name: Bump Version and Push Tag
        id: bump_version
        uses: mathieudutour/github-tag-action@v6.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          release_branches: main
          default_bump: patch    # Options: patch, minor, major
          tag_prefix: 'v'         # Prefix for tags (e.g., 'v1.0.0')
          skip_ci: true           # Prevent triggering workflows on tag push

      ### Step 3: Update VERSION File ###
      - name: Update VERSION File
        run: |
          echo "${{ steps.bump_version.outputs.new_version }}" > VERSION
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add VERSION
          git commit -m "ðŸ“¦ Version to v${{ steps.bump_version.outputs.new_version }} [skip ci]"
          git push origin main

      ### Step 4: Update setup.py with the New Version ###
      - name: Update setup.py Version
        run: |
          NEW_VERSION=${{ steps.bump_version.outputs.new_version }}
          # Update the version in setup.py
          sed -i "s/version=['\"][^'\"]*['\"],/version='${NEW_VERSION}',/" setup.py
          git add setup.py
          git commit -m "Update setup.py to version ${NEW_VERSION} [skip ci]" || echo "No changes to commit"
          git push origin main

      ### Step 6: Create GitHub Release ###
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.bump_version.outputs.new_version }}
          release_name: Release v${{ steps.bump_version.outputs.new_version }}
          body: "Release version v${{ steps.bump_version.outputs.new_version }}"
          draft: false
          prerelease: false

      ### Step 7: Set Up Python ###
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'  # Specify your Python version

      ### Step 8: Cache pip ###
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      ### Step 9: Install Build Dependencies ###
      - name: Install Build Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine

      ### Step 10: Build the Package ###
      - name: Build Package
        run: |
          python setup.py sdist bdist_wheel

      ### Step 11: Publish to PyPI ###
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          twine upload dist/*
